//
// Generated file, do not edit! Created by opp_msgtool 6.0 from LoRaApp/LoRaAppPacket.msg.
//

#ifndef __FLORA_LORAAPPPACKET_M_H
#define __FLORA_LORAAPPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace flora {

class LoRaOptions;
class LoRaAppPacket;

}  // namespace flora

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace flora {

/**
 * Enum generated from <tt>LoRaApp/LoRaAppPacket.msg:26</tt> by opp_msgtool.
 * <pre>
 * enum AppPacketType
 * {
 *     JOIN_REQUEST = 1;
 *     JOIN_REPLY = 2;
 *     DATA = 3;
 *     TXCONFIG = 4;
 * }
 * </pre>
 */
enum AppPacketType {
    JOIN_REQUEST = 1,
    JOIN_REPLY = 2,
    DATA = 3,
    TXCONFIG = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AppPacketType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AppPacketType& e) { int n; b->unpack(n); e = static_cast<AppPacketType>(n); }

/**
 * Class generated from <tt>LoRaApp/LoRaAppPacket.msg:33</tt> by opp_msgtool.
 * <pre>
 * class LoRaOptions
 * {
 *     double LoRaTP = -1;
 *     double LoRaCF = -1;
 *     int LoRaSF = -1;
 *     double LoRaBW = -1;
 *     int LoRaCR = -1;
 *     bool UseHeader = true;
 *     bool ADRACKReq = false;
 * }
 * </pre>
 */
class LoRaOptions
{
  protected:
    double LoRaTP = -1;
    double LoRaCF = -1;
    int LoRaSF = -1;
    double LoRaBW = -1;
    int LoRaCR = -1;
    bool UseHeader = true;
    bool ADRACKReq = false;

  private:
    void copy(const LoRaOptions& other);

  protected:
    bool operator==(const LoRaOptions&) = delete;

  public:
    LoRaOptions();
    LoRaOptions(const LoRaOptions& other);
    virtual ~LoRaOptions();
    LoRaOptions& operator=(const LoRaOptions& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    virtual double getLoRaTP() const;
    virtual void setLoRaTP(double LoRaTP);

    virtual double getLoRaCF() const;
    virtual void setLoRaCF(double LoRaCF);

    virtual int getLoRaSF() const;
    virtual void setLoRaSF(int LoRaSF);

    virtual double getLoRaBW() const;
    virtual void setLoRaBW(double LoRaBW);

    virtual int getLoRaCR() const;
    virtual void setLoRaCR(int LoRaCR);

    virtual bool getUseHeader() const;
    virtual void setUseHeader(bool UseHeader);

    virtual bool getADRACKReq() const;
    virtual void setADRACKReq(bool ADRACKReq);
};

/**
 * Class generated from <tt>LoRaApp/LoRaAppPacket.msg:43</tt> by opp_msgtool.
 * <pre>
 * class LoRaAppPacket extends inet::FieldsChunk
 * {
 *     int msgType \@enum(AppPacketType);
 *     int sampleMeasurement;
 *     LoRaOptions options;
 * }
 * </pre>
 */
class LoRaAppPacket : public ::inet::FieldsChunk
{
  protected:
    int msgType = 0;
    int sampleMeasurement = 0;
    LoRaOptions options;

  private:
    void copy(const LoRaAppPacket& other);

  protected:
    bool operator==(const LoRaAppPacket&) = delete;

  public:
    LoRaAppPacket();
    LoRaAppPacket(const LoRaAppPacket& other);
    virtual ~LoRaAppPacket();
    LoRaAppPacket& operator=(const LoRaAppPacket& other);
    virtual LoRaAppPacket *dup() const override {return new LoRaAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);

    virtual int getSampleMeasurement() const;
    virtual void setSampleMeasurement(int sampleMeasurement);

    virtual const LoRaOptions& getOptions() const;
    virtual LoRaOptions& getOptionsForUpdate() { handleChange();return const_cast<LoRaOptions&>(const_cast<LoRaAppPacket*>(this)->getOptions());}
    virtual void setOptions(const LoRaOptions& options);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LoRaAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LoRaAppPacket& obj) {obj.parsimUnpack(b);}


}  // namespace flora


namespace omnetpp {

inline any_ptr toAnyPtr(const flora::LoRaOptions *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline flora::LoRaOptions *fromAnyPtr(any_ptr ptr) { return ptr.get<flora::LoRaOptions>(); }
template<> inline flora::LoRaAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<flora::LoRaAppPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FLORA_LORAAPPPACKET_M_H

