//
// Generated file, do not edit! Created by opp_msgtool 6.0 from LoRa/LoRaMacControlInfo.msg.
//

#ifndef __FLORA_LORAMACCONTROLINFO_M_H
#define __FLORA_LORAMACCONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace flora {

class LoRaMacControlInfo;

}  // namespace flora

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace flora {

// cplusplus {{
using namespace inet;
// }}

/**
 * Class generated from <tt>LoRa/LoRaMacControlInfo.msg:30</tt> by opp_msgtool.
 * <pre>
 * class LoRaMacControlInfo
 * {
 *     inet::MacAddress src;  // src DevAddr address (can be left empty when sending)
 *     inet::MacAddress dest; // dest DevAddr address
 * 
 *     double LoRaTP;
 *     inet::Hz LoRaCF;
 *     int LoRaSF;
 *     inet::Hz LoRaBW;
 *     int LoRaCR;
 *     bool LoRaUseHeader;
 * }
 * </pre>
 */
class LoRaMacControlInfo
{
  protected:
    ::inet::MacAddress src;
    ::inet::MacAddress dest;
    double LoRaTP = 0;
    ::inet::Hz LoRaCF = Hz(NaN);
    int LoRaSF = 0;
    ::inet::Hz LoRaBW = Hz(NaN);
    int LoRaCR = 0;
    bool LoRaUseHeader = false;

  private:
    void copy(const LoRaMacControlInfo& other);

  protected:
    bool operator==(const LoRaMacControlInfo&) = delete;

  public:
    LoRaMacControlInfo();
    LoRaMacControlInfo(const LoRaMacControlInfo& other);
    virtual ~LoRaMacControlInfo();
    LoRaMacControlInfo& operator=(const LoRaMacControlInfo& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    virtual const ::inet::MacAddress& getSrc() const;
    virtual ::inet::MacAddress& getSrcForUpdate() { return const_cast<::inet::MacAddress&>(const_cast<LoRaMacControlInfo*>(this)->getSrc());}
    virtual void setSrc(const ::inet::MacAddress& src);

    virtual const ::inet::MacAddress& getDest() const;
    virtual ::inet::MacAddress& getDestForUpdate() { return const_cast<::inet::MacAddress&>(const_cast<LoRaMacControlInfo*>(this)->getDest());}
    virtual void setDest(const ::inet::MacAddress& dest);

    virtual double getLoRaTP() const;
    virtual void setLoRaTP(double LoRaTP);

    virtual ::inet::Hz getLoRaCF() const;
    virtual void setLoRaCF(::inet::Hz LoRaCF);

    virtual int getLoRaSF() const;
    virtual void setLoRaSF(int LoRaSF);

    virtual ::inet::Hz getLoRaBW() const;
    virtual void setLoRaBW(::inet::Hz LoRaBW);

    virtual int getLoRaCR() const;
    virtual void setLoRaCR(int LoRaCR);

    virtual bool getLoRaUseHeader() const;
    virtual void setLoRaUseHeader(bool LoRaUseHeader);
};


}  // namespace flora


namespace omnetpp {

inline any_ptr toAnyPtr(const flora::LoRaMacControlInfo *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline flora::LoRaMacControlInfo *fromAnyPtr(any_ptr ptr) { return ptr.get<flora::LoRaMacControlInfo>(); }

}  // namespace omnetpp

#endif // ifndef __FLORA_LORAMACCONTROLINFO_M_H

